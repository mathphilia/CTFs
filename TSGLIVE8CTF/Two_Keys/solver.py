def sqrt(n):
    digits = n.bit_length() // 2
    ans = 0
    for i in range(digits, -1, -1):
        ans ^= 1 << i
        if n < ans ** 2:
            ans ^= 1 << i
    return ans

def quadratic(a, b, c):
    # solve axÂ²+bx+c=0
    D = b ** 2 - 4 * a * c
    sqrtD = sqrt(D)
    if sqrtD ** 2 != D:
        return None, None
    if (-b - sqrtD) % (2 * a) != 0 and (-b + sqrtD) % (2 * a) != 0:
        return None, None
    return (-b - sqrtD) // (2 * a), (-b + sqrtD) // (2 * a)

def rsa_decrypt(c, e, p, q):
    N = p * q
    phi = (p - 1) * (q - 1)
    d = pow(e, -1, phi)
    return pow(c, d, N)


# First half:
N1 = 56857358946783738817465975297711204069935415016419932538392922530218921201217352346494361968035470184308357037387164930109496691365401965670237349367799774405061235025947852274083877022468072607753900481316564650009744632767993278947752127202134753913008582254000854930780954253903124752186965795809304941831
e1 = 65537
y1 = 54129553452548020723616698595285587704861441821682175273940519683163638301529404696982989366696324064594396066797701089154672560828427185057071836681043144874565113154501014407283089885871224438534781940829559886228137883794445606551971734932755694582218804069846658338752506228081788324414191778266867960340

# Second half:
N2 = 56857358946783738817465975297711204069935415016419932538392922530218921201217352346494361968035470184308357037387164930109496691365401965670237349367805332556208545324190423359112543995138089627600000504956531406110700016755090783444147649357626603184673602899015609448577621960908326053341685493162553923683
e2 = 65537
y2 = 54904189490273836503960200711350004725920576885881641688173306274762202573095421887773308652425204453956153996353028898080968805699877265273638393099277340479488951192104954084070323022216313855632506411275865181376283939786423085736432815359399351894579725901517442688632028924262380544819047494361593650323

for delta_p in range(2, 1000, 2):
    for delta_q in range(2, 1000, 2):
        a, b, c = delta_q, (delta_p * delta_q + N1 - N2), delta_p * N1
        p1, p2 = quadratic(a, b, c)

        if p1 is not None and N1 % p1 == 0:
            p = p1
        elif p2 is not None and N1 % p2 == 0:
            p = p2
        else:
            continue
        q = N1 // p

        if (p + delta_p) * (q + delta_q) == N2:
            pp, qq = p + delta_p, q + delta_q
        elif (p + delta_q) * (q + delta_p) == N2:
            pp, qq = p + delta_q, q + delta_p
        m1 = rsa_decrypt(y1, e1, p, q)
        m2 = rsa_decrypt(y2, e2, pp, qq)
        print(m1.to_bytes((m1.bit_length() + 7) // 8, 'big'))
        print(m2.to_bytes((m2.bit_length() + 7) // 8, 'big'))
        exit()
